'use strict';

module.exports = function (grunt) {
  /* jshint camelcase: false */
  // Time how long tasks take
  require('time-grunt')(grunt);

  // Automatically load required grunt tasks
  require('jit-grunt')(grunt, {
    sprite: 'grunt-spritesmith'
  });

  // Read main files from bower.json overrides object
  function getMainFilesFrom(overrides) {
    var result = {};

    for (var key in overrides) {
      // skip loop if the property is from prototype
      if (!overrides.hasOwnProperty(key)) continue;
      var obj = overrides[key];

      for (var prop in obj) {
        // skip loop if the property is from prototype
        if (!obj.hasOwnProperty(prop)) continue;
        if (prop === 'main') {
          result[key] = obj[prop];
        }
      }
    }
    return result;
  }

  // Project configuration
  grunt.initConfig({
    // Check dependencies
    checkDependencies: {
      this: {
        options: {
          packageManager: 'bower',
          install: false
        }
      }
    },

    // Sync remaining files to places other tasks can use
    sync: {
      dev: {
        verbose: true,
        failOnError: true,
        files: [
          {
            cwd: 'bower_components/jquery',
            src: 'jquery.js',
            dest: 'js'
          }, {
            cwd: 'bower_components/svgxuse',
            src: 'svgxuse.js',
            dest: 'js/'
          }
        ]
      }
    },

    // Create sprite
    sprite: {
      dev: {
        src: 'images/spritesrc/*.png',
        dest: 'images/spritesheet.png',
        imgPath: '../<%= sprite.dev.dest %>?' + (new Date().getTime()),
        retinaSrcFilter: 'images/spritesrc/*@2x.png',
        retinaDest: 'images/spritesheet@2x.png',
        retinaImgPath: '../<%= sprite.dev.retinaDest %>?' + (new Date().getTime()),
        destCss: 'scss/partials/_sprites.scss',
        padding: 2
      }
    },

    svgstore: {
      options: {
        svg: {
          // will add and overide the the default xmlns="http://www.w3.org/2000/svg" attribute to the resulting SVG.
          xmlns: 'http://www.w3.org/2000/svg',
          'xmlns:xlink': 'http://www.w3.org/1999/xlink',
          style: 'width:0;height:0;visibility:hidden;position:absolute;'
        }
      },
      sprite: {
        options: {
          includedemo: true
        },
        files: {
          'svg/sprite.svg': ['svg/spritesrc/*.svg']
        }
      }
    },

    // Optimize sprite
    imagemin: {
      dev: {
        options: {
          svgoPlugins: [{
            removeViewBox: false
          }, {
            removeUselessStrokeAndFill: false
          }, {
            removeEmptyAttrs: false
          }, {
            cleanupIDs: false
          }]
        },
        files: [{
          expand: true,
          cwd: 'images/',
          src: ['spritesheet.png', 'spritesheet@2x.png'],
          dest: 'images/'
        }, {
          'svg/sprite.min.svg': 'svg/sprite.svg'
        }]
      }
    },

    // Compiles Sass to CSS and generates necessary files if requested
    sass: {
      dev: {
        options: {
          sourceMap: true,
          imagePath: '../images',
          includePaths: require('node-bourbon').includePaths
        },
        files: {
          'css/screen.css': 'scss/screen.scss'
        }
      }
    },

    // Globbing for Sass
    sass_globbing: {
      your_target: {
        files: {
          'scss/partials/_blocks.scss': 'scss/partials/blocks/*.scss'
        },
        options: {
          useSingleQuotes: false,
          signature: '// This file is generated by a \'grunt-sass-globbing\' plugin.' +
          ' Please, do NOT edit it!'
        }
      }
    },

    // scss lint config.
    // Learn more about grunt-scss-lint https://www.npmjs.com/package/grunt-scss-lint
    scsslint: {
      allFiles: [
        'scss/**/*.scss'
      ],
      options: {
        config: '.scss-lint.yml',
        colorizeOutput: true,
        exclude: [
          'scss/partials/_sprites.scss',
          'scss/partials/_reset.scss'
        ]
      }
    },

    // JSHint, a tool that helps to detect errors and potential
    // problems in your JavaScript code.
    jshint: {
      files: ['Gruntfile.js', 'js/slice.js', 'js/*.js'],
      options: {
        jshintrc: true
      }
    },

    // Generate Modernizr
    modernizr: {
      dev: {
        'crawl': false,
        'parseFiles': false,
        'customTests': [],
        'dest': './js/modernizr.js',
        'tests': grunt.file.readJSON('./modernizr-tests.json', 'utf8').tests,
        'options': [
          'domPrefixes',
          'prefixes',
          'addTest',
          'atRule',
          'hasEvent',
          'mq',
          'prefixed',
          'prefixedCSS',
          'prefixedCSSValue',
          'testAllProps',
          'testProp',
          'testStyles',
          'setClasses'
        ],
        'uglify': false
      }
    },

    // Watches files for changes and runs tasks based on the changed files
    watch: {
      options: {
        livereload: true
      },
      gruntfile: {
        files: ['Gruntfile.js']
      },
      css: {
        files: ['css/**/*.css']
      },
      js: {
        files: ['js/**/*.js']
      },
      templates: {
        files: ['*.php', 'inc/**/*.php']
      },
      sass: {
        files: ['scss/**/*.scss'],
        tasks: ['buildCSS'],
        options: {
          livereload: false
        }
      },
      sprite: {
        files: ['images/spritesrc/**/*.png', 'svg/spritesrc/*.svg'],
        tasks: ['buildSprite']
      },
      bower: {
        files: ['bower.json'],
        tasks: ['build']
      },
      modernizr: {
        files: ['modernizr-tests.json'],
        tasks: ['buildModernizr']
      }
    },

    // On demand PHP server
    php: {
      dev: {
        options: {
          hostname: '0.0.0.0',
          port: 3000,
          base: '.',
          silent: true,
          open: false
        }
      }
    },

    // Just open default browser
    open: {
      dev: {
        path: 'http://localhost:3000/'
      }
    }
  });

  // Force load tasks which can not be loaded by 'jit-grunt'
  grunt.loadNpmTasks('grunt-notify');
  grunt.loadNpmTasks('grunt-scss-lint');
  grunt.loadNpmTasks('grunt-contrib-jshint');
  grunt.loadNpmTasks('grunt-force-task');

  // Register tasks for future use
  grunt.registerTask('buildSprite', ['sprite', 'svgstore', 'imagemin']);
  grunt.registerTask('buildCSS', ['sass_globbing', 'sass']);
  grunt.registerTask('buildModernizr', ['modernizr']);

  grunt.registerTask('serve', ['php', 'open']);

  grunt.registerTask('build', [
    'checkDependencies',
    'sync',
    // 'bower_concat',
    'buildSprite',
    'buildCSS',
    'buildModernizr'
  ]);

  // Register task to check js and scss.
  grunt.registerTask('test', ['force:jshint', 'scsslint']);

  // Register defult task
  grunt.registerTask('default', ['build', 'serve', 'watch']);
};
